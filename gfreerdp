#!/usr/bin/wish
#
# output log to syslog
exec logger "begin"
exec logger [clock milliseconds]

global commandctl hostname usrname passwd
set commandctl "/usr/bin/xfreerdp"



#for storage
global lockfilename lockfid dbfile mapIpToUsrname

set lockfilename "~/gui.lock"
set dbfile "~/login.selfdb"
set mapIpToUsrname [dict create]




proc screen {} {
  #when change the value,the input field will synchrony change 
  global hostname usrname passwd

  frame .top -borderwidth 10
  pack .top -fill x	
  
  label .top.tips -text "Tips: Ctrl + Alt + Enter to toggle-fullscreen when in remote desktop" -font Courier

  set hostname "192.168.31.218"
  label .top.labelhost -text "Hostname:" -font bold
  entry .top.hostname -width 40 -relief sunken -bd 2 -textvariable hostname
  #insert default template value
  #.top.hostname insert 0 $hostname
  .top.hostname icursor [string len $hostname]
  
  set usrname "Administrator"
  label .top.labelusr -text "Username:" -font bold
  entry .top.username -width 40 -relief sunken -bd 2 -textvariable usrname
  #.top.username insert 0 $usrname
  
  label .top.labelpass -text "Password:" -font bold
  #entry .top.passwd -width 40 -relief sunken -bd 2 -show * -textvariable passwd
  #show clear text
  entry .top.passwd -width 40 -relief sunken -bd 2          -textvariable passwd

  button .top.connect -text "Connect(wantReturn)" -command connect -bg yellow -activebackground green -font bold


  pack .top.tips -fill x
  pack .top.labelhost .top.hostname -fill x
  pack .top.labelusr .top.username -fill x
  pack .top.labelpass .top.passwd -fill x
  pack .top.connect -fill x

  wm title . "Linux Jumper"

  #focus must input field
  focus .top.hostname

  #bind keyboard event
  bind .top.hostname <KeyRelease> {
     puts "You pressed %K"
     hostnamechange
  }

  #want return
  bind .  <Return> { connect }
}

proc hostnamechange {} {

    global hostname usrname passwd mapIpToUsrname
    puts "hostnamechange,hostname:$hostname"

    if { [dict exist $mapIpToUsrname $hostname] } {

          set value [dict get $mapIpToUsrname $hostname]

          if { [string len $value] > 0 } {
          
               set usrname $value

               focus .top.passwd

          }
    }  
}




proc connect {} {
      global commandctl hostname usrname passwd mapIpToUsrname

      #hide the paaword clear text 
      .top.passwd configure -show *

      #fetch the windows size
      set winheight [winfo  screenheight .]
      set winwidth  [winfo  screenwidth .]

      # for xfreerdp ctrl + alt + enter to toggle fullscreen
      try {
            #write to db
            set hostname [string trim $hostname]
            set usrname  [string trim $usrname]
                  
            if { [string length $hostname] > 0 && [string length $usrname] > 0 } {
                  puts stderr "hostname:$hostname,usrname:$usrname is not empty! write to db"
                  reloadThenWritedb_withlock  $hostname  $usrname
                  #use the below command to check whether all paras is valid ?
                  #but store the hostname&usrname firstly for the case user close the remote
                  #desktop directly,it will lose the chance for storing
               }

            #exec $commandctl /w:$winwidth /h:$winheight /toggle-fullscreen  /cert-ignore  /v:$hostname /u:$usrname /p:$passwd
            #audio-mode:1 is just my needed ,leave audio at remote machine
            exec $commandctl /f /toggle-fullscreen /audio-mode:1 /cert-ignore  /v:$hostname /u:$usrname /p:$passwd
          
          } on {error} {} {

            #extract keyword to judge whether exited normally
            set isNormalExit [string first "Closed from X11" $::errorInfo]
            set isIpInvalid [string first "unable to connect to" $::errorInfo]
            set isPwdInvalid [string first "denied" $::errorInfo]
            set isInvalid [string first "connection failure" $::errorInfo]

           puts stderr "isNormalExit:$isNormalExit,isIpInvalid:$isIpInvalid,isPwdInvalid:$isPwdInvalid,isInvalid:$isInvalid"

           if {$isNormalExit == -1 } {
              
              #see the password is valid ??
              .top.passwd configure -show ""
              focus .top.passwd
                
              tk_messageBox -title "remote Access  Error $isNormalExit" -message "$usrname:$passwd@$hostname,Are you OK ?" -detail $::errorInfo	  
              
            }

            #at here will lose some chance for storing
           if { $isNormalExit == -1 && $isIpInvalid == -1 && $isPwdInvalid == -1 && $isInvalid == -1 } {
      
          }    
    }
}



#*******************************lib methods***************************
proc lockfile {} {
  global lockfilename lockfid
  if { [file exists $lockfilename] } {
    puts stderr "$lockfilename exist,may be race condition or exception,please check!"
  } else {
    puts stderr "$lockfilename does not exist! OK!"
  }
  
  #empty key/value object 
  array set filestat ""
  
  set older_seconds 6
  while { [catch { set lockfid [open $lockfilename {WRONLY CREAT EXCL }] } err]} {
      file stat $lockfilename filestat
      puts stderr "wait to lock,filecreatetime:[clock format $filestat(ctime)], now:[clock format [clock seconds]] . err:$err"
      puts stderr "delta:[clock seconds] - $filestat(ctime).Threshold:$older_seconds,Delta:[expr [clock seconds] - $filestat(ctime)]"

      if { [expr [clock seconds] - $filestat(ctime)] > $older_seconds } {
        puts stderr "the current lock file is too older!Maybe Exception,delete it in force!"
        file delete -force $lockfilename
        continue
      }

      #wait because race condition
      after 1000
      }
 }


proc unlockfile {} {
	global lockfilename lockfid

	if { [catch { close $lockfid } err] } {
	   puts stderr "close file exception,$err"
	 }

	if { [catch { file delete $lockfilename } err] } {
	   puts stderr "remove file exception,$err"
	 }
}


proc readdbfile {} {
	global dbfile mapIpToUsrname
	puts stderr "readdbfile, $dbfile"

	if { [catch { source $dbfile } err] } {
	   puts stderr "readdbfile exception,$err" 
	 }

	 puts stderr [format "read size:%d" [dict size $mapIpToUsrname]]
}

proc writedbfile {} {
	global dbfile mapIpToUsrname
	puts stderr "writedbfile, $dbfile"

	if { [catch { set writefid [open $dbfile {WRONLY CREAT TRUNC}] } filerr ] == 0 } {

	  puts "write db begin!"
	  puts $writefid "#!/usr/bin/tclsh"
	  puts $writefid "#login data mapping ip to usrname db!"
	  puts $writefid ""

	  puts $writefid "global mapIpToUsrname"
	  puts $writefid ""

	  puts [format "write size:%d" [dict size $mapIpToUsrname] ]

	  dict for { key value } $mapIpToUsrname {
		 #the difference of dictionaryValue and dictionaryVariable
		 #use format to grouping arguments
		 puts $writefid [format "dict set mapIpToUsrname {%s} {%s}" $key $value]
	   }

	  catch { close $writefid }

	  puts "write db end!"
	 } else {
	  puts stderr "writedbfile exception,$dbfile,$filerr"
	 }

}


proc readdb_withlock {} {

  try {
     lockfile
     readdbfile
  } finally {
    unlockfile
  }

} 


proc writedb_withlock {} {

  try {
     lockfile
     writedbfile
  } finally {
    unlockfile
  }
}



proc reloadThenWritedb_withlock {hostname usrname} {

  global mapIpToUsrname

  try {
  
    #to keep atomic 
    lockfile
    #read again to update
    readdbfile

    dict set mapIpToUsrname "$hostname" "$usrname"
    puts [format  "insert len:%d" [dict size $mapIpToUsrname]]

    writedbfile
  } finally {
  
    unlockfile

  }

}

proc delayproc { delaytime } {
  
  puts "linux jumper some actions,delay:$delaytime"
}

#***********************main entry*************************
readdb_withlock

#
screen
after idle {puts "hello linux jumper"}


for {set delay 100} { $delay < 4000} { incr delay 100} {

  after $delay delayproc $delay

}

exec logger "end"
exec logger [clock milliseconds]

